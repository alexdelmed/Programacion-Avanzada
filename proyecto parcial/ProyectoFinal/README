

Counting Strings


You are given a string s consisting of upper case Latin alphabets, i.e. from 'A' to 'Z'. Your 
task is to find how many strings t with length equal to that of S, also consisting of upper 
case Latin alphabet are there satisfying the following conditions:

String t is lexicographical larger than s
When you write both s and t in the reverse order, t is still lexicographical larger than s.
Find out number of such strings t. As the answer could be very large, output it modulo 109 + 7

Input
The only line of input contains string s.

Output
Output a single line containing an integer corresponding to the result in modulo 109 + 7.

Constraints
1 ≤ |S| ≤ 105
Example
Input 1:
ZAZ

Output 1:
25

Input 2:
XYZ

Output 2:
5
Explanation
Test #1: To make a valid string t, you can just replace the letter A in S by any other letter, 
e.g. by replacing 'A' by 'B', we get t = ZBZ. Note that ZBZ is lexicographically larger than ZAZ. 
Reverse of t (i.e. ZBZ) is also lexicographically larger than reverse of s (i.e. ZAZ).

Test #2: there are 5 valid strings: YYZ, ZYZ, XZZ, YZZ, ZZZ

-----  LINK     https://www.codechef.com/problems/TACNTSTR

Problem
Given the string S count the number of the strings of same length T 
such that T is lexicographically bigger then S and when we reverse the order 
of characters in both of the two strings T is still lexicographically bigger than S.

Solution
We will using dynamic programing (dp). Let F[i][ok1][ok2] is the number of the strings T 
that we can generated if we already got the first i-1 characters of it and ok1 and ok2 
represent the following information:
ok1 = 0 mean the first i - 1 characters of T still match the corresponding t - 1 characters 
of S. ok1 = 1 mean T is larger then S.
ok2 = 0 mean in the reversed order the first t - 1 characters in T is already lexicographically 
larger then the corresponding characters in S. ok2 = 0 if otherwise.
Let N is the length of S The result of course will be F[0][0][0]. We can initialize the dp with 
F[N + 1][1][1] = 1. We will calculate F in the decreasing order of i. With each i, ok1, ok2, we 
try to put all possible character in position i so that T is never lexicographically smaller than S in 
the original order.
